<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
  	<link href="epub.css" media="all" rel="stylesheet" type="text/css" />
  	<script type="text/javascript" src="svg.js"></script>
  </head>
  <body id="conceptual_flow_with_tasks">
    <div class="content-wrapper">
      <div id="chapter_container" class='conceptualwithtasks'>
  <article class="chapter">
    <a id="TP40016643-CH2">&#x200c;</a><a id="TP40016643-CH2-ID1">&#x200c;</a>
    <h2 class="chapter-name">A Swift Tour</h2>

      	<section class="section">
      		<p class="para">เมื่อเริ่มต้นเรียนรู้ภาษาใหม่ โดยทั่วๆไปแล้วมักจะแนะนำให้เขียนโปรแกรมแรก ด้วยการให้แสดงคำว่า “Hello, world!” ที่หน้าจอคอมพิวเตอร์ ในภาษา Swift โปรแกรมนี้สามารถเขียนได้ด้วยโค้ดเพียงแค่หนึ่งบรรทัด </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="vc">print</code>(<code class="s">&quot;Hello, world!&quot;</code>)</code></li>
        </ol>
      </div>
  </div>
</section>
<p class="para">โปรแกรมเมอร์ภาษา C หรือ Objective-C อาจจะคุ้ยเคยกับโค้ดของภาษาสวิฟต์ ซึ่งมีไวยากรณ์ลักษณะคล้ายคลึงกัน โค้ดหนึ่งบรรทัดที่เห็นคือโปรแกรมที่ทำงานได้เสร็จสมบูรณ์ ไม่ต้องใช้ไลบรารีเพิ่มเติมสำหรับ แสดงค่า รับค่า หรือจัดการสตริง โค้ดที่อยู่ในส่วนนอกสุดหรือ global scope จะใช้เป็นจุดเริ่มต้นการทำงานของโปรแกรม ไม่ต้องเขียนฟังก์ชัน
<code class="code-voice">main()</code> และไม่ต้องเขียนเครื่องหมายเซมิโคลอนเมื่อจบคำสั่ง</p><p class="para">
            เนื้อหาในบทนี้จะให้ความรู้พื้นฐานสำหรับ การเริ่มต้นเขียนโปรแกรมด้วยภาษา Swift เราจะสาธิตให้เห็นถึงวิธีการเขียนโปรแกรม ด้วยการแก้ปัญหาจากหลายๆตัวอย่าง และยังไม่ต้องกังวล ถ้าหากคุณจะไม่เข้าใจเนื้อหาต่างๆในบทนี้ เพราะในบทอื่นๆของหนังสือจะอธิบายถึงวิธีการใช้งานโดยละเอียดอีกครั้งหนึ่ง</p>
    		</section>

        <section class="section">
          <div class="note playground">
            <aside class="aside">
              <p class="aside-title uppercase">หมายเหตุ</p>
              <p class="para"></p>
              <p class="para">สำหรับ macOS, สามารถดาวน์โหลดไฟล์เพลกราวด์และเปิดไฟล์ด้วย Xcode: <a href="https://developer.apple.com/go/?id=swift-tour">https://developer.apple.com/go/?id=swift-tour</a></p>

            </aside>
          </div>
        </section>

      <section class="section">
	<a id="TP40016643-CH2-ID461">&#x200c;</a>
  <h3 class="section-name">Simple Values</h3>
  <p class="para">ใช้ <code class="code-voice">var</code> เพื่อประกาศตัวแปร และใช้ <code class="code-voice">let</code> เพื่อประกาศค่าคงที่ การประกาศค่าคงที่ไม่จำเป็นต้องกำหนดค่าในช่วงคอมไพล์ไทม์ นั่นหมายความว่าคุณสามารถประกาศค่าคงที่แล้วค่อยกำหนดค่าหลังก็ได้ แต่จะกำหนดค่าได้เพียงแค่ครั้งเดียวเท่านั้น และจะต้องใช้ค่านั้นไปตลอด</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">myVariable</code> = <code class="m">42</code></code></li>
            <li><code class="code-voice"><code class="vc">myVariable</code> = <code class="m">50</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">myConstant</code> = <code class="m">42</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">เมื่อประกาศค่าคงที่หรือตัวแปรต้องกำหนดประเภทของข้อมูล และค่าที่จะใช้กำหนดให้กับตัวแปรหรือค่าคงที่ ต้องเป็นข้อมูลประเภทเดียวกันกับตอนประกาศ อย่างไรก็ตามคุณไม่จำเป็นต้องระบุชนิดของข้อมูลก็ได้ เพียงแค่กำหนดค่าเริ่มต้นของข้อมูลเมื่อตอนประกาศ แล้วให้คอมไพเลอร์เป็นคนจัดการประเภทของข้อมูลด้วยการ infer หรืออนุมานจากค่ากำหนดให้  จากตัวอย่างด้านบน คอมไพเลอร์อนุมานว่า <code class="code-voice">myVariable</code> เป็นตัวแปรจำนวนเต็ม เพราะว่าค่าที่กำหนดให้ตอนเริ่มต้นนั้น เป็นค่าจำนวนเต็มนั่นเอง</p><p class="para">ถ้าไม่สามารถอนุมานจากค่าเริ่มต้นได้ (อาจจะไม่มีค่าเริ่มต้น) ก็ต้องกำหนดชนิดของข้อมูลด้วยการเขียนโคลอน และตามด้วยชนิดของข้อมูลที่ต้องการ</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">implicitInteger</code> = <code class="m">70</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">implicitDouble</code> = <code class="m">70.0</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">explicitDouble</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> = <code class="m">70</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">สร้างค่าคงที่แบบ <code class="code-voice">Float</code> และกำหนดค่าเป็น <code class="code-voice">4</code>
    	</p>

  </aside>
</div><p class="para">หลังจากการประกาศค่าคงที่หรือตัวแปรไปแล้วเราไม่สามารถเปลี่ยนประเภทข้อมูลได้ หากต้องการจะเปลี่ยน ก็ต้องสร้างข้อมูลขึ้นมาใหม่จากค่าเดิมที่มีอยู่แล้ว </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">label</code> = <code class="s">&quot;The width is &quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">width</code> = <code class="m">94</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">widthLabel</code> = <code class="vc">label</code> + <code class="vc">String</code>(<code class="vc">width</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">ถ้าหากลบโค้ด <code class="code-voice">String</code> ที่ทำการเปลี่ยนชนิดของข้อมูลในบรรทัดสุดท้ายจะเกิดอะไรขึ้น คุณได้รับแจ้งข้อผิดพลาดว่าอะไร ?
    	</p>

  </aside>
</div><p class="para">สำหรับการนำค่าของ ค่าคงที่ หรือตัวแปร เข้ามารวมไว้ในสตริง มีวิธีการง่ายๆคือเขียนชื่อตัวแปรที่ต้องการไว้ในวงเล็บ และเขียนเครื่องหมายแบ็กแสลช (<code class="code-voice">\</code>) ก่อนวงเล็บ เช่นตัวอย่าง</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">apples</code> = <code class="m">3</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">oranges</code> = <code class="m">5</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">appleSummary</code> = <code class="s">&quot;I have </code>\(<code class="vc">apples</code>)<code class="s"> apples.&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">fruitSummary</code> = <code class="s">&quot;I have </code>\(<code class="vc">apples</code> + <code class="vc">oranges</code>)<code class="s"> pieces of fruit.&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">ใช้ <code class="code-voice">\()</code> เพื่อนำเลขทศนิยมรวมไว้ในสตริง และลองสร้างตัวแปรที่เก็บชื่อของคุณไว้ และนำมาแสดงร่วมกับข้อความทักทาย
    	</p>

  </aside>
</div><p class="para">สร้างอาเรย์และดิกชันนารีโดยใช้เครื่องหมายวงเล็บก้ามปู (<code class="code-voice">[]</code>) และเข้าถึงสมาชิก ด้วยการเขียนลำดับหรือคีย์ในวงเล็บก้ามปู ส่วนเครื่องหมายจุลภาค (comma) ที่ใช้แบ่งสมาชิกอาเรย์ อนุญาตให้เขียนได้แม้อยู่หลังสมาชิกตัวสุดท้ายก็ตาม</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">shoppingList</code> = [<code class="s">&quot;catfish&quot;</code>, <code class="s">&quot;water&quot;</code>, <code class="s">&quot;tulips&quot;</code>, <code class="s">&quot;blue paint&quot;</code>]</code></li>
            <li><code class="code-voice"><code class="vc">shoppingList</code>[<code class="m">1</code>] = <code class="s">&quot;bottle of water&quot;</code></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">occupations</code> = [</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Malcolm&quot;</code>: <code class="s">&quot;Captain&quot;</code>,</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Kaylee&quot;</code>: <code class="s">&quot;Mechanic&quot;</code>,</code></li>
            <li><code class="code-voice">]</code></li>
            <li><code class="code-voice"><code class="vc">occupations</code>[<code class="s">&quot;Jayne&quot;</code>] = <code class="s">&quot;Public Relations&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">สร้างอาเรย์หรือดิกชันนารีว่างเปล่าโดยใช้ initializer หรือการกำหนดค่าเริ่มต้น </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">emptyArray</code> = [<code class="vc">String</code>]()</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">emptyDictionary</code> = [<code class="vc">String</code>: <code class="vc">Float</code>]()</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ถ้าหากข้อมูลสามารถใช้การอนุมานได้ คุณสามารถสร้างอาเรย์ว่างเปล่าด้วย <code class="code-voice">[]</code> และสร้างดิกชันนารีว่างๆด้วย <code class="code-voice">[:]</code> เช่น เมื่อกำหนดค่าให้กับตัวแปร หรือส่งอากิวเมนต์ให้กับฟังก์ชัน</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="vc">shoppingList</code> = []</code></li>
            <li><code class="code-voice"><code class="vc">occupations</code> = [:]</code></li>
        </ol>
      </div>
  </div>
</section>

</section>
<section class="section">
	<a id="TP40016643-CH2-ID462">&#x200c;</a>
  <h3 class="section-name">Control Flow</h3>
  <p class="para">ใช้ <code class="code-voice">if</code> และ <code class="code-voice">switch</code> เพื่อสร้างเงื่อนไข และใช้ <code class="code-voice">for</code>-<code class="code-voice">in</code>, <code class="code-voice">while</code> และ <code class="code-voice">repeat</code>-<code class="code-voice">while</code> เพื่อสร้างลูป เงื่อนไขของลูปไม่จำเป็นต้องเขียนภายในเครื่องหมายวงเล็บ แต่จำเป็นต้องเขียนเครื่องหมายปีกกาครอบคลุมในส่วนที่เป็นคำสั่งการทำงาน</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">individualScores</code> = [<code class="m">75</code>, <code class="m">43</code>, <code class="m">103</code>, <code class="m">87</code>, <code class="m">12</code>]</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">teamScore</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">for</code> <code class="vc">score</code> <code class="kt">in</code> <code class="vc">individualScores</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">if</code> <code class="vc">score</code> &gt; <code class="m">50</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">teamScore</code> += <code class="m">3</code></code></li>
            <li><code class="code-voice">    } <code class="kt">else</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">teamScore</code> += <code class="m">1</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">teamScore</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ในการใช้ <code class="code-voice">if</code> นั้น เงื่อนไขต้องเขียนเป็นนิพจน์บูลีน (Boolean expression) นั่นหมายถึงว่า โค้ดอย่าง <code class="code-voice">if score { ... }</code> จะทำให้เกิดข้อผิดพลาด เนื่องจากโค้ดดังกล่าวไม่ได้หมายถึงการเปรียบเทียบกับค่าศูนย์ </p><p class="para">คุณสามารถใช้ <code class="code-voice">if</code> และ <code class="code-voice">let</code> เพื่อทำงานกับค่าที่อาจจะไม่มีอยู่ ค่าเหล่านี้จะอยู่ในรูปของออปชั่นนัล (optional) ออปชั่นนัลคืออาจจะมีค่า หรือไม่มีค่า หรือพูดอีกอย่างว่ามีค่าเป็น <code class="code-voice">nil</code> เขียนเครื่องหมายคำถาม (<code class="code-voice">?</code>) ต่อท้ายชนิดของข้อมูลเพื่อบอกว่าค่านี้เป็นออปชั่นนัล</p><section class="code-listing">


  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">optionalString</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>? = <code class="s">&quot;Hello&quot;</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">optionalString</code> == <code class="kt">nil</code>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">optionalName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>? = <code class="s">&quot;John Appleseed&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">greeting</code> = <code class="s">&quot;Hello!&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <code class="vc">name</code> = <code class="vc">optionalName</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">greeting</code> = <code class="s">&quot;Hello, </code>\(<code class="vc">name</code>)<code class="s">&quot;</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">เปลี่ยน <code class="code-voice">optionalName</code> ให้เป็นค่า <code class="code-voice">nil</code> แล้วดูว่าเกิดอะไรขึ้น ? ลองเพิ่มเงื่อนไข <code class="code-voice">else</code> พร้อมกับแสดงคำทักทาย เพื่อรองรับกรณีที่ค่า <code class="code-voice">optionalName</code> เป็น <code class="code-voice">nil</code>.
    	</p>

  </aside>
</div><p class="para">ถ้าออปชั่นนัลเป็น <code class="code-voice">nil</code> เงื่อนไขจะเป็น <code class="code-voice">false</code> และโค้ดที่อยู่ภายในปีกกาจะไม่ทำงาน ในทางตรงกันข้ามถ้าหากออปชั่นนัลมีค่าอยู่ ค่านั้นจะ unwrapped หรือถูกนำออกมาใช้ จากนั้นค่านี้จะเอามาใช้กับการประกาศค่าคงด้วย <code class="code-voice">let</code> ซึ่งค่าคงที่ ที่ได้มาจากออปชันนัลนี้ จะสามารถนำมาใช้กับโค้ดที่อยู่ภายใต้เงื่อนไขได้ </p><p class="para">อีกวิธีการหนึ่งในการจัดการกับออปชั่นนัลคือกำหนดค่าเริ่มต้นให้กับมันด้วยการใช้ <code class="code-voice">??</code> ถ้าหากออปชั่นนอลไม่มีค่าอยู่ ค่าเริ่มต้นที่กำหนดให้จะถูกนำออกมาใช้แทน</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">nickName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>? = <code class="kt">nil</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">fullName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;John Appleseed&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">informalGreeting</code> = <code class="s">&quot;Hi </code>\(<code class="vc">nickName</code> ?? <code class="vc">fullName</code>)<code class="s">&quot;</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">Switch รองรับข้อมูลหลายประเภท และมีการเปรียบเทียบหลายแบบ ไม่ได้จำกัดเพียงแค่จำนวนเต็ม และเปรียบเทียบว่ามีค่าเท่ากัน</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">vegetable</code> = <code class="s">&quot;red pepper&quot;</code></code></li>
            <li><code class="code-voice"><code class="kt">switch</code> <code class="vc">vegetable</code> {</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="s">&quot;celery&quot;</code>:</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Add some raisins and make ants on a log.&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="s">&quot;cucumber&quot;</code>, <code class="s">&quot;watercress&quot;</code>:</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;That would make a good tea sandwich.&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="kt">let</code> <code class="vc">x</code> <code class="kt">where</code> <code class="vc">x</code>.<code class="vc">hasSuffix</code>(<code class="s">&quot;pepper&quot;</code>):</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Is it a spicy </code>\(<code class="vc">x</code>)<code class="s">?&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">default</code>:</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Everything tastes good in soup.&quot;</code>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">ลองลบเคส default แล้วดูว่าเกิดอะไรขึ้น
    	</p>

  </aside>
</div><p class="para">สังเกตว่า <code class="code-voice">let</code> นั้นสามารถใช้การเปรียบเทียบรูปแบบหรือ pattern matching เพื่อกำหนดค่าคงที่ให้ตรงตามรูปแบบที่ต้องการได้ </p><p class="para">เมื่อเคสใดทำงานเสร็จ โปรแกรมจะหลุดออกจากสวิชทันที ไม่ทำงานในเคสต่อไป ดังนั้นไม่จำเป็นต้องเขียนโค้ดเพื่อบอกให้หยุดการทำงานเมื่อเคสนั้นสิ้นสุดลง </p>

    <p class="para">ใช้ <code class="code-voice">for</code>-<code class="code-voice">in</code> สำหรับการเข้าถึงสมาชิกทุกตัวของดิกชันนารีด้วยการวนรอบ หรือ iterate โดยกำหนดคู่ของคีย์และค่าของข้อมูล ดิกชันนารีเป็นข้อมูลคอลเลกชันที่ไม่มีลำดับ ดังนั้นคีย์และค่าจะ iterate โดยไม่เรียงลำดับ</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">interestingNumbers</code> = [</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Prime&quot;</code>: [<code class="m">2</code>, <code class="m">3</code>, <code class="m">5</code>, <code class="m">7</code>, <code class="m">11</code>, <code class="m">13</code>],</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Fibonacci&quot;</code>: [<code class="m">1</code>, <code class="m">1</code>, <code class="m">2</code>, <code class="m">3</code>, <code class="m">5</code>, <code class="m">8</code>],</code></li>
            <li><code class="code-voice">    <code class="s">&quot;Square&quot;</code>: [<code class="m">1</code>, <code class="m">4</code>, <code class="m">9</code>, <code class="m">16</code>, <code class="m">25</code>],</code></li>
            <li><code class="code-voice">]</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">largest</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">for</code> (<code class="vc">kind</code>, <code class="vc">numbers</code>) <code class="kt">in</code> <code class="vc">interestingNumbers</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">number</code> <code class="kt">in</code> <code class="vc">numbers</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">if</code> <code class="vc">number</code> &gt; <code class="vc">largest</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">largest</code> = <code class="vc">number</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">largest</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">ทดลอง</p>
    	<p class="para">เพิ่มตัวแปรเพื่อใช้เก็บตัวเลขที่มีค่ามากที่สุด และตัวแปรที่เก็บค่ามากที่สุดของแต่ละชนิด
    	</p>

  </aside>
</div><p class="para">ใช้ <code class="code-voice">while</code> เพื่อให้โค้ดโปรแกรมที่ต้องการทำงานซ้ำ จนกระทั่งเงื่อนไขที่กำหนดไว้เปลี่ยนแปลง เงื่อนไขของลูปถ้าเขียนไว้ตอนท้าย ลูปจะต้องทำงานอย่างน้อยหนึ่งครั้งเสมอ </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">n</code> = <code class="m">2</code></code></li>
            <li><code class="code-voice"><code class="kt">while</code> <code class="vc">n</code> &lt; <code class="m">100</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">n</code> = <code class="vc">n</code> * <code class="m">2</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">n</code>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">m</code> = <code class="m">2</code></code></li>
            <li><code class="code-voice"><code class="kt">repeat</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">m</code> = <code class="vc">m</code> * <code class="m">2</code></code></li>
            <li><code class="code-voice">} <code class="kt">while</code> <code class="vc">m</code> &lt; <code class="m">100</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">m</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">คุณสามารถตั้งระยะจำนวนรอบของลูปด้วยการใช้ <code class="code-voice">..&lt;</code> </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">total</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice"><code class="kt">for</code> <code class="vc">i</code> <code class="kt">in</code> <code class="m">0</code>..&lt;<code class="m">4</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">total</code> += <code class="vc">i</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">total</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ใช้ <code class="code-voice">..&lt;</code> เพื่อตั้งระยะที่ไม่รวมกับค่าสุดท้าย และใช้ <code class="code-voice">...</code> เพื่อสร้างระยะที่มีค่าตั้งแต่ต้นรวมไปจนถึงค่าสุดท้าย</p>

</section>
<section class="section">
	<a id="TP40016643-CH2-ID463">&#x200c;</a>
  <h3 class="section-name">Functions and Closures</h3>
  <p class="para">ใช้ <code class="code-voice">func</code> เพื่อประกาศฟังก์ชัน เรียกใช้ฟังก์ชันด้วยชื่อและส่งอาเมนต์ต่างๆภายในเครื่องหมายวงเล็บ ใช้ <code class="code-voice">-&gt;</code> เพื่อแยกชื่อและชนิดข้อมูลของพารามิเตอร์ ออกจากค่าส่งกลับของฟังก์ชัน</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">greet</code>(<code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>, <code class="vc">day</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="s">&quot;Hello </code>\(<code class="vc">name</code>)<code class="s">, today is </code>\(<code class="vc">day</code>)<code class="s">.&quot;</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">greet</code>(<code class="s">&quot;Bob&quot;</code>, <code class="vc">day</code>: <code class="s">&quot;Tuesday&quot;</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบทดสอบ</p>
    	<p class="para">ลบพารามิเตอร์ <code class="code-voice">day</code> ออก แล้วเพิ่มพารามิเตอร์ที่ไว้สำหรับบอกชื่ออาหารพิเศษของมื้อเที่ยง และรวมมันไว้ในข้อความต้อนรับ
    	</p>

  </aside>
</div><p class="para">ใช้ทูเพิล (tuple) เพื่อสร้างกลุ่มของข้อมูล เช่น เพื่อส่งค่าหลายๆค่ากลับจากฟังก์ชัน สมาชิกของทูเพิลสามารถเข้าถึงได้ด้วยชื่อหรือตัวเลข</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">calculateStatistics</code>(<code class="vc">scores</code>: [<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>]) -&gt; (<code class="vc">min</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">max</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>, <code class="vc">sum</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">min</code> = <code class="vc">scores</code>[<code class="m">0</code>]</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">max</code> = <code class="vc">scores</code>[<code class="m">0</code>]</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sum</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">score</code> <code class="kt">in</code> <code class="vc">scores</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">if</code> <code class="vc">score</code> &gt; <code class="vc">max</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">max</code> = <code class="vc">score</code></code></li>
            <li><code class="code-voice">        } <code class="kt">else</code> <code class="kt">if</code> <code class="vc">score</code> &lt; <code class="vc">min</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">min</code> = <code class="vc">score</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <code class="vc">sum</code> += <code class="vc">score</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">return</code> (<code class="vc">min</code>, <code class="vc">max</code>, <code class="vc">sum</code>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">statistics</code> = <code class="vc">calculateStatistics</code>([<code class="m">5</code>, <code class="m">3</code>, <code class="m">100</code>, <code class="m">3</code>, <code class="m">9</code>])</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">statistics</code>.<code class="vc">sum</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">statistics</code>.<code class="m">2</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ฟังก์ชันสามารถรับอากิวเมนต์ได้หลายๆค่า ซึ่งจะถูกรวมไว้ในอาเรย์</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">sumOf</code>(<code class="vc">numbers</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>...) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sum</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">number</code> <code class="kt">in</code> <code class="vc">numbers</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">sum</code> += <code class="vc">number</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">sum</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">sumOf</code>()</code></li>
            <li><code class="code-voice"><code class="vc">sumOf</code>(<code class="m">42</code>, <code class="m">597</code>, <code class="m">12</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">เขียนฟังก์ชันเพื่อคำนวนค่าเฉลี่ยของอากิวเมนต์ที่รับเข้ามา
    	</p>

  </aside>
</div><p class="para">ฟังก์ชันสามารถเขียนซ้อนกันได้ ฟังก์ชันที่ซ้อนอยู่ด้านใน สามารถเข้าถึงตัวแปรที่ประกาศในฟังก์ชันด้านนอก คุณสามารถใช้ฟังก์ชันซ้อนเพื่อจัดการโค้ดที่ยาวและซับซ้อนได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">returnFifteen</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">y</code> = <code class="m">10</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">add</code>() {</code></li>
            <li><code class="code-voice">        <code class="vc">y</code> += <code class="m">5</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="vc">add</code>()</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">y</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">returnFifteen</code>()</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ฟังก์ชันเป็นชนิดข้อมูลชั้นหนึ่งหรือ first-class type นั่นหมายถึงว่าฟังก์ชันสามารถส่งค่ากลับที่เป็นฟังก์ชัน ได้เหมือนกับการส่งค่าอื่นๆ</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">makeIncrementer</code>() -&gt; ((<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">addOne</code>(<code class="vc">number</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="m">1</code> + <code class="vc">number</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">addOne</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">increment</code> = <code class="vc">makeIncrementer</code>()</code></li>
            <li><code class="code-voice"><code class="vc">increment</code>(<code class="m">7</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ฟังก์ชันสามารถรับพารามิเตอร์ที่เป็นฟังก์ชันได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">hasAnyMatches</code>(<code class="vc">list</code>: [<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>], <code class="vc">condition</code>: (<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">item</code> <code class="kt">in</code> <code class="vc">list</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">if</code> <code class="vc">condition</code>(<code class="vc">item</code>) {</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="kt">true</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="kt">false</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">lessThanTen</code>(<code class="vc">number</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">number</code> &lt; <code class="m">10</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">numbers</code> = [<code class="m">20</code>, <code class="m">19</code>, <code class="m">7</code>, <code class="m">12</code>]</code></li>
            <li><code class="code-voice"><code class="vc">hasAnyMatches</code>(<code class="vc">numbers</code>, <code class="vc">condition</code>: <code class="vc">lessThanTen</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ฟังก์ชันจริงๆ แล้วเป็นโคลเชอร์พิเศษ (closure) รูปแบบหนึ่ง โคลเชอร์เป็นโค้ดที่สามารถเรียกใช้งานภายหลังได้ โค้ดที่เขียนอยู่ในโคลเชอร์จะสามารถเข้าถึงสิ่งต่างๆได้เช่น ตัวแปร และฟังก์ชัน ถ้าสิ่งเหล่านี้อยู่ในขอบเขตเดียวกันกับตอนที่สร้างโคลเชอร์ มันก็จะสามารถใช้งานได้ ไม้เว้นแม้กระทั่งตอนที่โคลเชอร์ทำงานอยู่ในขอบเขตอื่น เราได้เห็นตัวอย่างของโคลเชอร์มาแล้วจากการใช้ฟังก์ชันซ้อน คุณสามารถเขียนโคลเชอร์โดยไม่ต้องตั้งชื่อ ด้วยการเขียนโค้ดภายในปีกกา (<code class="code-voice">{}</code>). ใช้ <code class="code-voice">in</code> เพื่อแยกระหว่างอากิวเมนต์ ค่าส่งกลับของโคลเชอร์ ออกจากส่วนการทำงาน</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="vc">numbers</code>.<code class="vc">map</code>({</code></li>
            <li><code class="code-voice">    (<code class="vc">number</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> <code class="kt">in</code></code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">result</code> = <code class="m">3</code> * <code class="vc">number</code></code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">result</code></code></li>
            <li><code class="code-voice">})</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">ลองเปลี่ยนให้โคลเชอร์ส่งค่า 0 กลับมา ถ้าหากจำนวนมีค่าเป็นเลขคี่
    	</p>

  </aside>
</div><p class="para">มีหลายวิธีเพื่อทำให้การเขียนโค้ดให้กระชับมากขึ้น เมื่อรู้รูปแบบของโคลเชอร์ อย่างเช่น โคลเชอร์ที่มี callback สำหรับ delgate คุณไม่จำเป็นต้องเขียนชนิดของพารามิเตอร์ ค่าส่งกลับ หรือไม่เขียนทั้งสองอย่างก็ได้ และโคลเชอร์ที่เขียนเพียงหนึ่งบรรทัดจะถือเป็นการส่งค่ากลับของโค้ดบรรทัดนั้น</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">mappedNumbers</code> = <code class="vc">numbers</code>.<code class="vc">map</code>({ <code class="vc">number</code> <code class="kt">in</code> <code class="m">3</code> * <code class="vc">number</code> })</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">mappedNumbers</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">คุณสามารถใช้ตัวเลขแทนชื่อของพารามิเตอร์ วิธีการนี้จะมีประโยชน์มากในการเขียนโคลเชอร์ให้สั้นลง ถ้าฟังก์ชันมีพารามิเตอร์ตัวสุดท้ายเป็นโคลเชอร์ สามารถเขียนโคลเชอร์ต่อจากวงเล็บได้ทันที หากโคลเชอร์เป็นเพียงอากิวเมนต์เดียวของฟังก์ชัน จะไม่เขียนวงเล็บเลยก็ได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">sortedNumbers</code> = <code class="vc">numbers</code>.<code class="vc">sort</code> { <code class="vc">$0</code> &gt; <code class="vc">$1</code> }</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">sortedNumbers</code>)</code></li>
        </ol>
      </div>
  </div>
</section>

</section>
<section class="section">
	<a id="TP40016643-CH2-ID464">&#x200c;</a>
  <h3 class="section-name">Objects and Classes</h3>
  <p class="para">ใช้ <code class="code-voice">class</code> ตามด้วยชื่อของคลาสเพื่อประกาศคลาส การประกาศพร๊อพเพอร์ตี้สามารถใช้วิธีการเดียวกันกับการประกาศค่าคงที่หรือตัวแปร เพียงแต่ว่าต้องเขียนภายอยู่ภายในส่วนของคลาส การประกาศเมธอดและฟังก์ชันก็เช่นเดียวกัน </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">Shape</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">numberOfSides</code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;A shape with </code>\(<code class="vc">numberOfSides</code>)<code class="s"> sides.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบทดสอบ</p>
    	<p class="para">เพิ่มพร๊อพเพอร์ตี้ค่าคงที่ด้วย <code class="code-voice">let</code> และเขียนเมธอดที่รับอากิวเมนต์
    	</p>

  </aside>
</div><p class="para">สร้างอินสแตนซ์ (instance) ของคลาสด้วยการเขียนวงเล็บต่อจากชื่อของคลาส เข้าใช้พร๊อพเพอร์ตี้และเมธอดของอินสแตนซ์ด้วยเครื่องหมายจุด </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">shape</code> = <code class="vc">Shape</code>()</code></li>
            <li><code class="code-voice"><code class="vc">shape</code>.<code class="vc">numberOfSides</code> = <code class="m">7</code></code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">shapeDescription</code> = <code class="vc">shape</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">คลาส <code class="code-voice">Shape</code> ที่เห็น ยังขาดสิ่งที่สำคัญไป นั่นคือส่วนของการกำหนดค่าเริ่มต้นเมื่อตอนที่มันถูกสร้างขึ้นมา ใช้ <code class="code-voice">init</code> สำหรับการกำหนดค่าเริ่มต้น</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">NamedShape</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">numberOfSides</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> = <code class="m">0</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">name</code> = <code class="vc">name</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;A shape with </code>\(<code class="vc">numberOfSides</code>)<code class="s"> sides.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ในการกำหนดค่าเริ่มต้น ให้สังเกตว่า <code class="code-voice">self</code> ถูกใช้แยกแยะระหว่างอากิวเมนต์ <code class="code-voice">name</code> กับพร๊อพเพอร์ตี้ <code class="code-voice">name</code> ออกจากกันเพื่อป้องกันความสับสน สำหรับอากิวเมนต์ที่ใช้กำหนดค่าเริ่มต้น จะถูกส่งเข้ามาเหมือนกับการเรียกใช้ฟังก์ชัน เมื่อคุณทำการสร้างอินสแตนซ์ของคลาส พร๊อพเพอร์ตี้ทุกตัวต้องการ การกำหนดค่าไม่ว่าจะเป็นตอนการประกาศพร๊อพเพอร์ตี้ (ดังที่เห็นในตัวแปร <code class="code-voice">numberOfSides</code>) หรือตอนการกำหนดค่าเริ่มต้นของอินสแตนซ์ (ดังที่เห็นใน <code class="code-voice">name</code>)</p><p class="para">ใช้ <code class="code-voice">deinit</code> เพื่อเขียนส่วนตอนจบการทำงานหรือ deinitializer ถ้าหากคุณต้องการจะจัดการอ๊อบเจ็คก่อนที่มันจะถูกทำลายหรือ deallocated </p>

    <p class="para">Subclasses ทำได้ด้วยการเขียนโคลอนระหว่าง ชื่อของซูเปอร์คลาสและซับคลาส คลาสไม่จำเป็นต้องซับคลาส จากคลาสพื้นฐานใดๆ </p><p class="para">ใช้ <code class="code-voice">override</code> เพื่อเขียนทับหรือเปลี่ยนการทำงานของเมธอดในซับคลาสให้ต่างไปจากซูเปอร์คลาส ถ้าหากไม่มี <code class="code-voice">override</code> เขียนไว้ เมื่อเกิดการเขียนทับเมธอด คอมไพล์เลอร์จะแจ้งข้อผิดพลาด เพื่อป้องกันการเขียนทับโดยไม่ตั้งใจ และคอมไพลเลอร์จะทำการตรวจสอบเมธอดที่ประกาศ  <code class="code-voice">override</code> แต่ไม่ได้ทำการเขียนทับเมธอดใดๆของซูเปอร์คลาส</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">Square</code>: <code class="n"><!-- a href="" logicalPath="" -->NamedShape<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>, <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">sideLength</code> = <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        <code class="kt">super</code>.<code class="kt">init</code>(<code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">        <code class="vc">numberOfSides</code> = <code class="m">4</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">area</code>() -&gt;  <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="vc">sideLength</code> * <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">override</code> <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;A square with sides of length </code>\(<code class="vc">sideLength</code>)<code class="s">.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">test</code> = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="m">5.2</code>, <code class="vc">name</code>: <code class="s">&quot;my test square&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">test</code>.<code class="vc">area</code>()</code></li>
            <li><code class="code-voice"><code class="vc">test</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">สร้างซับคลาสของ <code class="code-voice">NamedShape</code> และตั้งชื่อว่า <code class="code-voice">Circle</code> ซึ่งคลาสนี้จะมีการกำหนดค่าเริ่มต้น ที่รับเส้นผ่านศูนย์กลางและชื่อ  เขียนเมธอด <code class="code-voice">area()</code> และ <code class="code-voice">simpleDescription()</code> สำหรับคลาส <code class="code-voice">Circle</code>
    	</p>

  </aside>
</div><p class="para">พร๊อพเพอร์ตี้นอกจากจะเก็บข้อมูลง่ายๆแล้ว มันยังสามารถมี getter และ setter ได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">EquilateralTriangle</code>: <code class="n"><!-- a href="" logicalPath="" -->NamedShape<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> = <code class="m">0.0</code></code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">sideLength</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>, <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code>.<code class="vc">sideLength</code> = <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        <code class="kt">super</code>.<code class="kt">init</code>(<code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">        <code class="vc">numberOfSides</code> = <code class="m">3</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">perimeter</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">get</code> {</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="m">3.0</code> * <code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">        <code class="kt">set</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">sideLength</code> = <code class="vc">newValue</code> / <code class="m">3.0</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">override</code> <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;An equilateral triangle with sides of length </code>\(<code class="vc">sideLength</code>)<code class="s">.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">triangle</code> = <code class="vc">EquilateralTriangle</code>(<code class="vc">sideLength</code>: <code class="m">3.1</code>, <code class="vc">name</code>: <code class="s">&quot;a triangle&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangle</code>.<code class="vc">perimeter</code>)</code></li>
            <li><code class="code-voice"><code class="vc">triangle</code>.<code class="vc">perimeter</code> = <code class="m">9.9</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangle</code>.<code class="vc">sideLength</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ใน setter ของ <code class="code-voice">perimeter</code> ค่าที่จะกำหนดให้ใหม่จะมีชื่อเป็น <code class="code-voice">newValue</code> ถ้าไม่ต้องการชื่อนี้ คุณสามารถใช้ชื่ออื่นได้โดยเขียนชื่อไว้ในวงเล็บต่อจาก <code class="code-voice">set</code>.</p>

    <p class="para">สังเกตว่าการกำหนดค่าของคลาส <code class="code-voice">EquilateralTriangle</code> มีอยู่ด้วยกันทั้งหมดสามขั้นตอนคือ</p><ol class="list-number">
  <li class="item"><p class="para">กำหนดค่าให้กับพร๊อพเพอร์ตี้ของซับคลาสที่ได้ประกาศไว้</p></li><li class="item"><p class="para">เรียกการกำหนดค่าของของซูเปอร์คลาส</p></li><li class="item"><p class="para">เปลี่ยนค่าพร๊อพเพอร์ตี้ที่ถูกกำหนดโดยซูเปอร์คลาส ส่วนการกำหนดค่าเพิ่มเติมอื่นๆที่ต้องเรียกใช้เมธอด getter หรือ setter ก็จะทำตรงจุดนี้</p></li>
</ol><p class="para">ถ้าคุณไม่ได้ต้องการจะทำอะไรพิเศษกับค่าของพร๊อพเพอร์ตี้ แต่ต้องการที่จะให้โค้ดบางอย่างทำงานก่อนหรือหลังที่ค่าพร๊อพเพอร์ตี้จะเปลี่ยนแปลง ใช้ <code class="code-voice">willSet</code> และ <code class="code-voice">didSet</code> โค้ดที่เขียนไว้จะทำงานทุกครั้งที่ค่าเปลี่ยนแปลง เช่น คลาสตัวอย่างด้านล่าง ค่าความยาวของสี่เหลี่ยมและสามเหลี่ยมจะค่าเท่ากันเมื่อเปลี่ยนแปลงค่า </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">TriangleAndSquare</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">triangle</code>: <code class="n"><!-- a href="" logicalPath="" -->EquilateralTriangle<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">willSet</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">square</code>.<code class="vc">sideLength</code> = <code class="vc">newValue</code>.<code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">square</code>: <code class="n"><!-- a href="" logicalPath="" -->Square<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">willSet</code> {</code></li>
            <li><code class="code-voice">            <code class="vc">triangle</code>.<code class="vc">sideLength</code> = <code class="vc">newValue</code>.<code class="vc">sideLength</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">init</code>(<code class="vc">size</code>: <code class="n"><!-- a href="" logicalPath="" -->Double<!-- /a --></code>, <code class="vc">name</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) {</code></li>
            <li><code class="code-voice">        <code class="vc">square</code> = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="vc">size</code>, <code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">        <code class="vc">triangle</code> = <code class="vc">EquilateralTriangle</code>(<code class="vc">sideLength</code>: <code class="vc">size</code>, <code class="vc">name</code>: <code class="vc">name</code>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">triangleAndSquare</code> = <code class="vc">TriangleAndSquare</code>(<code class="vc">size</code>: <code class="m">10</code>, <code class="vc">name</code>: <code class="s">&quot;another test shape&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangleAndSquare</code>.<code class="vc">square</code>.<code class="vc">sideLength</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangleAndSquare</code>.<code class="vc">triangle</code>.<code class="vc">sideLength</code>)</code></li>
            <li><code class="code-voice"><code class="vc">triangleAndSquare</code>.<code class="vc">square</code> = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="m">50</code>, <code class="vc">name</code>: <code class="s">&quot;larger square&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">triangleAndSquare</code>.<code class="vc">triangle</code>.<code class="vc">sideLength</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">เมื่อทำงานกับออปชันนัล คุณสามารถเขียน <code class="code-voice">?</code> ก่อนการกระทำอื่นๆ เช่น เรียกเมธอด พร๊อพเพอร์ตี้ หรือซับสคริปติ้ง ถ้าค่าก่อนเครื่องหมาย <code class="code-voice">?</code> เป็น <code class="code-voice">nil</code> ทุกๆอย่างหลังจาก <code class="code-voice">?</code> โปรแกรมจะไม่สนใจ และค่าของนิพจน์ทั้งหมดจะเป็น <code class="code-voice">nil</code> ในทางตรงกันข้ามค่าของออปชันนอลจะถูกนำออกมาใช้ และทุกอย่างหลังจาก <code class="code-voice">?</code> ก็จะนำมาใช้กับค่านี้ได้ ในกรณีนี้ค่าของนิพจน์ทั้งหมดจะถือเป็นค่าออปชันนัล</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">optionalSquare</code>: <code class="n"><!-- a href="" logicalPath="" -->Square<!-- /a --></code>? = <code class="vc">Square</code>(<code class="vc">sideLength</code>: <code class="m">2.5</code>, <code class="vc">name</code>: <code class="s">&quot;optional square&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">sideLength</code> = <code class="vc">optionalSquare</code>?.<code class="vc">sideLength</code></code></li>
        </ol>
      </div>
  </div>
</section>

</section>
<section class="section">
	<a id="TP40016643-CH2-ID465">&#x200c;</a>
  <h3 class="section-name">Enumerations and Structures</h3>
  <p class="para">ใช้ <code class="code-voice">enum</code> เพื่อสร้าง enumeration ซึ่งเป็นข้อมูลที่ถูกจำกัดไว้ให้มีค่าเป็นไปได้เพียงไม่กี่ค่า และเช่นเดียวกันกับคลาสและข้อมูลชนิดอื่นๆ อีนูเมอเรชั่นสามารถมีเมธอดเพื่อใช้ทำงานได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">Rank</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Ace</code> = <code class="m">1</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Two</code>, <code class="vc">Three</code>, <code class="vc">Four</code>, <code class="vc">Five</code>, <code class="vc">Six</code>, <code class="vc">Seven</code>, <code class="vc">Eight</code>, <code class="vc">Nine</code>, <code class="vc">Ten</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Jack</code>, <code class="vc">Queen</code>, <code class="vc">King</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">switch</code> <code class="kt">self</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Ace</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;ace&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Jack</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;jack&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Queen</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;queen&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">King</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;king&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">default</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="vc">String</code>(<code class="kt">self</code>.<code class="vc">rawValue</code>)</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">ace</code> = <code class="vc">Rank</code>.<code class="vc">Ace</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">aceRawValue</code> = <code class="vc">ace</code>.<code class="vc">rawValue</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝีกหัด</p>
    	<p class="para">เขียนฟังก์ชันเพื่อเปรียบเทียบ <code class="code-voice">Rank</code> สองค่า โดยให้เปรียบเทียบกับค่า raw value
    	</p>

  </aside>
</div><p class="para">โดยปกติแล้ว Swift จะให้ค่าเริ่มต้นของ raw value เป็นศูนย์และเพิ่มค่าขึ้นทีละหนึ่ง อย่างไรก็ตามคุณสามารถที่จะเปลี่ยนการทำงานนี้ได้ ด้วยการกำหนดค่าที่ต้องการ เช่นตัวอย่างด้านบน <code class="code-voice">Ace</code> ถูกกำหนดให้มีค่า raw value เป็น <code class="code-voice">1</code> หลังจากนั้นค่าที่เหลือก็จะเพิ่มขึ้นทีละหนึ่งตามลำดับ คุณสามารถที่ใช้สตริงหรือทศนิยม เพื่อเป็น raw value สำหรับ enumertation ได้เช่นเดียวกัน ใช้พร๊อพเพอร์ตี้ <code class="code-voice">rawValue</code> เพื่อเข้าถึงค่า raw value ของอีนูเมอเรชัน </p><p class="para">ใช้ <code class="code-voice">init?(rawValue:)</code> เพื่อกำหนดค่าเริ่มต้นในการสร้างอินสแตนซ์ของอีนูเมอเรชันจาก raw value</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">if</code> <code class="kt">let</code> <code class="vc">convertedRank</code> = <code class="vc">Rank</code>(<code class="vc">rawValue</code>: <code class="m">3</code>) {</code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">threeDescription</code> = <code class="vc">convertedRank</code>.<code class="vc">simpleDescription</code>()</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ค่าของ enumeration ในแต่ละรายการคือค่าที่ใช้ได้จริง ไม่ได้เป็นเพียงแค่วิธีการเขียนค่า raw value อีกรูปแบบเท่านั้น อันที่จริงแล้วถ้า raw value ไม่มีประโยชน์ คุณก็ไม่จำเป็นต้องกำหนดให้มัน</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">Suit</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Spades</code>, <code class="vc">Hearts</code>, <code class="vc">Diamonds</code>, <code class="vc">Clubs</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">switch</code> <code class="kt">self</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Spades</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;spades&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Hearts</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;hearts&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Diamonds</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;diamonds&quot;</code></code></li>
            <li><code class="code-voice">        <code class="kt">case</code> .<code class="vc">Clubs</code>:</code></li>
            <li><code class="code-voice">            <code class="kt">return</code> <code class="s">&quot;clubs&quot;</code></code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">hearts</code> = <code class="vc">Suit</code>.<code class="vc">Hearts</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">heartsDescription</code> = <code class="vc">hearts</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝีดทัด</p>
    	<p class="para">เพิ่มเมธอด <code class="code-voice">color()</code> ให้กับ <code class="code-voice">Suit</code> ซึ่งเมธอดจะส่งค่า black กลับมาในกรณีที่เป็น spades และ clubs และจะส่งค่า red กลับมาถ้าหากเป็น hearts และ diamonds
    	</p>

  </aside>
</div><p class="para">สังเกตว่าสองวิธีการที่ เคส <code class="code-voice">Hearts</code> ของ enumeration ที่ถูกนำมาใช้ อย่างแรกคือใช้ตอนให้ค่ากับตัวแปร <code class="code-voice">hearts</code> ค่าของ <code class="code-voice">Suit.Hearts</code> ถูกเขียนแบบเต็ม เพราะว่าตัวแปรนั้นไม่รู้ว่าค่าคือข้อมูลประเภทอะไร แต่ในส่วนของ switch นั้น ค่าแต่ละเคสของ enumeration ถูกเขียนแบบย่อรูป <code class="code-voice">.Hearts</code> นั่นก็เพราะว่าค่าของ <code class="code-voice">self</code> นั้นรู้อยู่แล้วว่าเป็น suit คุณสามารถใช้ตัวย่อได้ทุกครั้งถ้าหากรู้แล้วว่าค่านั้นเป็นประเภทใด </p><p class="para">ใช้ <code class="code-voice">struct</code> เพื่อสร้าง structure สตรัคเจอร์มีคุณสมบัติหลายอย่างเหมือนกับคลาส เช่น เมธอด และการกำหนดค่าเริ่มต้น แต่สิ่งหนึ่งที่สำคัญที่สุดที่ทำให้สตรัคเจอร์แตกต่างไปจากคลาสก็คือ สตรัคเจอร์นั้นจะเมื่อส่งค่าจะเป็นการคัดลอกค่า แต่คลาสจะเป็นการส่งแบบอ้างอิง</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">Card</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">rank</code>: <code class="n"><!-- a href="" logicalPath="" -->Rank<!-- /a --></code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">suit</code>: <code class="n"><!-- a href="" logicalPath="" -->Suit<!-- /a --></code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">simpleDescription</code>() -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;The </code>\(<code class="vc">rank</code>.<code class="vc">simpleDescription</code>())<code class="s"> of </code>\(<code class="vc">suit</code>.<code class="vc">simpleDescription</code>())<code class="s">&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">threeOfSpades</code> = <code class="vc">Card</code>(<code class="vc">rank</code>: .<code class="vc">Three</code>, <code class="vc">suit</code>: .<code class="vc">Spades</code>)</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">threeOfSpadesDescription</code> = <code class="vc">threeOfSpades</code>.<code class="vc">simpleDescription</code>()</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">เพิ่มเมธอดไว้สำหรับสร้างกองไพ่ให้กับคลาส <code class="code-voice">Card</code> ซึ่งการ์ดแต่ละใบประกอบไปด้วยเลข และหน้าไพ่
    	</p>

  </aside>
</div><p class="para">อินสแตนซ์ของอีนูเมอเรชั่นสามารถมี assosiate value ได้ อินสแตนซ์ของอีนูเมอเรชั่นชนิดเดียวกันมี assosiate value เป็นคนละค่าได้ ค่า assosiate value จะถูกกำหนดเมื่อตอนสร้างอินสแตนซ์ และค่า assosiate value กับ raw value นั้นเป็นคนละอย่างกัน อีนูเมอเรชันทุกๆตัวจะมีค่า raw value เหมือนกัน เรากำหนดค่า raw value เมื่อประกาศอีนูเมอเรชั่น</p><p class="para">ยกตัวอย่างเช่น ให้ลองพิจารณากรณีการขอเวลาพระอาทิตย์ขึ้นและลงจากเซิฟเวอร์ เซิฟเวอร์อาจจะส่งข้อมูลกลับมา หรืออาจจะแจ้งข้อผิดพลาดกลับมาก็ได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">ServerResponse</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Result</code>(<code class="vc">String</code>, <code class="vc">String</code>)</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Failure</code>(<code class="vc">String</code>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">success</code> = <code class="vc">ServerResponse</code>.<code class="vc">Result</code>(<code class="s">&quot;6:00 am&quot;</code>, <code class="s">&quot;8:09 pm&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">failure</code> = <code class="vc">ServerResponse</code>.<code class="vc">Failure</code>(<code class="s">&quot;Out of cheese.&quot;</code>)</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">switch</code> <code class="vc">success</code> {</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="kt">let</code> .<code class="vc">Result</code>(<code class="vc">sunrise</code>, <code class="vc">sunset</code>):</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Sunrise is at </code>\(<code class="vc">sunrise</code>)<code class="s"> and sunset is at </code>\(<code class="vc">sunset</code>)<code class="s">.&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">case</code> <code class="kt">let</code> .<code class="vc">Failure</code>(<code class="vc">message</code>):</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Failure...  </code>\(<code class="vc">message</code>)<code class="s">&quot;</code>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝีกหัด</p>
    	<p class="para">เพิ่มเคสที่สามให้กับ <code class="code-voice">ServerResponse</code> และ switch
    	</p>

  </aside>
</div>


    <p class="para"> สังเกตว่าค่า sunrise และ sunset นั้นได้รับมาจาก <code class="code-voice">ServerResponse</code> ตามเงื่อนไขใน switch</p>

</section>
<section class="section">
	<a id="TP40016643-CH2-ID466">&#x200c;</a>
  <h3 class="section-name">Protocols and Extensions</h3>
  <p class="para">ใช้ <code class="code-voice">protocol</code> เพื่อประกาศโพรโทคอล</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">protocol</code> <code class="vc">ExampleProtocol</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> { <code class="kt">get</code> }</code></li>
            <li><code class="code-voice">    <code class="kt">mutating</code> <code class="kt">func</code> <code class="vc">adjust</code>()</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">คลาส, อีนูเมอเรชั่น และสตรัคเจอร์สามารถใช้โพรโทคอลได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">class</code> <code class="vc">SimpleClass</code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;A very simple class.&quot;</code></code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">anotherProperty</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code> = <code class="m">69105</code></code></li>
            <li><code class="code-voice">    <code class="kt">func</code> <code class="vc">adjust</code>() {</code></li>
            <li><code class="code-voice">        <code class="vc">simpleDescription</code> += <code class="s">&quot;  Now 100% adjusted.&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">a</code> = <code class="vc">SimpleClass</code>()</code></li>
            <li><code class="code-voice"><code class="vc">a</code>.<code class="vc">adjust</code>()</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">aDescription</code> = <code class="vc">a</code>.<code class="vc">simpleDescription</code></code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">struct</code> <code class="vc">SimpleStructure</code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> = <code class="s">&quot;A simple structure&quot;</code></code></li>
            <li><code class="code-voice">    <code class="kt">mutating</code> <code class="kt">func</code> <code class="vc">adjust</code>() {</code></li>
            <li><code class="code-voice">        <code class="vc">simpleDescription</code> += <code class="s">&quot; (adjusted)&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">b</code> = <code class="vc">SimpleStructure</code>()</code></li>
            <li><code class="code-voice"><code class="vc">b</code>.<code class="vc">adjust</code>()</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">bDescription</code> = <code class="vc">b</code>.<code class="vc">simpleDescription</code></code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">เขียนอีนูเมอเรชันที่รองรับโพรโทคอลนี้
    	</p>

  </aside>
</div><p class="para">สังเกตการใช้ <code class="code-voice">mutating</code> กับเมธอดในสตรัคเจอร์ <code class="code-voice">SimpleStructure</code> การประกาศนี้ก็เพื่อบอกว่าเมธอดนี้จะทำการแก้ไขค่าของสตรัคเจอร์  แต่คลาส <code class="code-voice">SimpleClass</code> ไม่จำเป็นต้องประกาศเมธอดให้เป็น mutating เพราะว่าเมธอดของคลาสนั้นสามารถแก้ไขค่าของคลาสได้อยู่แล้ว </p><p class="para">ใช้ <code class="code-voice">extension</code> เพื่อเพิ่มความสามารถให้กับประเภทของข้อมูลที่มีอยู่ก่อนแล้ว อย่างเช่น เพิ่มเมธอดหรือพร๊อพเพอร์ตี้ คุณสามารถใช้ extension เพื่อรองรับโพรโทคอล หรือแม้กระทั่งใช้กับประเภทข้อมูลที่มาจากไลบรารีหรือเฟรมเวิร์ค</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">extension</code> <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">simpleDescription</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">        <code class="kt">return</code> <code class="s">&quot;The number </code>\(<code class="kt">self</code>)<code class="s">&quot;</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">mutating</code> <code class="kt">func</code> <code class="vc">adjust</code>() {</code></li>
            <li><code class="code-voice">        <code class="kt">self</code> += <code class="m">42</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="m">7</code>.<code class="vc">simpleDescription</code>)</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">เขียน extension ให้กับประเภทข้อมูลแบบ <code class="code-voice">Double</code> โดยเพิ่มพร๊อพเพอร์ตี้ <code class="code-voice">absoluteValue</code>
    	</p>

  </aside>
</div><p class="para">คุณสามารถใช้โพรโทคอลได้เหมือนกับการใช้ข้อมูลชนิดอื่น เช่น สร้างคอเล็กชันของอออเจ็กต่างชนิดกัน แต่ทุกๆออบเจ็กรองรับโพรโทคอลเดียวกันเป็นต้น เมื่อทำงานกับค่าที่เป็นโพรโทคอล เมธอดที่ไม่ได้อยู่ในโพโทคอลจะไม่ได้สามารถใช้งานได้</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">protocolValue</code>: <code class="n"><!-- a href="" logicalPath="" -->ExampleProtocol<!-- /a --></code> = <code class="vc">a</code></code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">protocolValue</code>.<code class="vc">simpleDescription</code>)</code></li>
            <li><code class="code-voice"><code class="c">// print(protocolValue.anotherProperty)  // Uncomment to see the error</code></code></li>
        </ol>
      </div>
  </div>
</section><p class="para">แม้ว่าตัวแปร <code class="code-voice">protocolValue</code> ในช่วงรันไทม์จะเป็นชนิด <code class="code-voice">SimpleClass</code> แต่คอมไพเลอร์จะถือว่าตัวแปรนี้เป็น <code class="code-voice">ExampleProtocol</code> นั่นหมายถึงว่าจะไม่เกิดข้อผิดพลาดแบบไม่ได้ตั้งใจ เช่น ใช้เมธอดหรือพร๊อพเพอร์ตี้ของคลาสที่รองรับโพรโทคอลนี้</p>

</section>
<section class="section">
	<a id="TP40016643-CH2-NoLink_20">&#x200c;</a>
  <h3 class="section-name">Error Handling</h3>
  <p class="para">คุณสามารถแสดงข้อผิดพลาดสำหรับข้อมูลทุกชนิดได้ด้วยการรองรับโพรโทคอล <code class="code-voice">ErrorType</code> </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">PrinterError</code>: <code class="n"><!-- a href="" logicalPath="" -->ErrorType<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">OutOfPaper</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">NoToner</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">OnFire</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ใช้ <code class="code-voice">throw</code> เพื่อส่งข้อผิดพลาดกลับ และใช้ <code class="code-voice">throws</code> เพื่อบอกว่าเมธอดนี้สามารถส่งข้อผิดพลาดกลับมาได้ ถ้าคุณส่งข้อผิดพลาดออกมาจากฟังก์ชัน ฟังก์ชันจะส่งค่ากลับมาทันที และโค้ดที่เป็นผู้เรียกฟังก์ชันต้องเป็นคนจัดการกับข้อผิดพลาดนั้น</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">ร
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">sendToPrinter</code>(<code class="vc">printerName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) <code class="kt">throws</code> -&gt; <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">if</code> <code class="vc">printerName</code> == <code class="s">&quot;Never Has Toner&quot;</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">throw</code> <code class="vc">PrinterError</code>.<code class="vc">NoToner</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="s">&quot;Job sent&quot;</code></code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">มีวิธีการหลายอย่างเพื่อใช้จัดการกับข้อผิดพลาด วิธีแรกคือใช้ <code class="code-voice">do</code>-<code class="code-voice">catch</code> ซึ่งภายในโค้ด <code class="code-voice">do</code> คุณต้องบอกโค้ดที่จะส่งข้อผิดพลาดด้วยการเขียน <code class="code-voice">try</code> ไว้ที่ด้านหน้า ในส่วนของ <code class="code-voice">catch</code> ข้อผิดพลาดที่เกิดขึ้นจะถูกตั้งชื่อให้เป็น <code class="code-voice">error</code> โดยอัตโนมัติ ยกเว้นว่าคุณอยากตั้งเป็นชื่ออื่น </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">do</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">printerResponse</code> = <code class="kt">try</code> <code class="vc">sendToPrinter</code>(<code class="s">&quot;Bi Sheng&quot;</code>)</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="vc">printerResponse</code>)</code></li>
            <li><code class="code-voice">} <code class="kt">catch</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="vc">error</code>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบทดสอบ</p>
    	<p class="para">เปลี่ยนชื่อของ printer ให้เป็น <code class="code-voice">&quot;Never Has Toner&quot;</code> เพื่อที่ฟังก์ชัน <code class="code-voice">sendToPrinter(_:)</code> จะได้ส่งข้อผิดพลาดกลับมา
    	</p>

  </aside>
</div><p class="para">คุณมี <code class="code-voice">catch</code> ได้หลายอัน เพื่อที่จะได้จัดการข้อผิดพลาดที่เจาะจงเฉพาะอย่าง คุณกำหนดรูปแบบเงื่อนไขหลังจาก <code class="code-voice">catch</code> เหมือนกับที่ตอนเขียน <code class="code-voice">case</code> ในการใช้งาน switch</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">do</code> {</code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">printerResponse</code> = <code class="kt">try</code> <code class="vc">sendToPrinter</code>(<code class="s">&quot;Gutenberg&quot;</code>)</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="vc">printerResponse</code>)</code></li>
            <li><code class="code-voice">} <code class="kt">catch</code> <code class="vc">PrinterError</code>.<code class="vc">OnFire</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;I&#39;ll just put this over here, with the rest of the fire.&quot;</code>)</code></li>
            <li><code class="code-voice">} <code class="kt">catch</code> <code class="kt">let</code> <code class="vc">printerError</code> <code class="kt">as</code> <code class="n"><!-- a href="" logicalPath="" -->PrinterError<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="s">&quot;Printer error: </code>\(<code class="vc">printerError</code>)<code class="s">.&quot;</code>)</code></li>
            <li><code class="code-voice">} <code class="kt">catch</code> {</code></li>
            <li><code class="code-voice">    <code class="vc">print</code>(<code class="vc">error</code>)</code></li>
            <li><code class="code-voice">}</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบทดสอบ</p>
    	<p class="para">เขียนโค้ดที่ส่งข้อผิดพลาดใน <code class="code-voice">do</code> แล้วข้อผิดพลาดแรกที่คุณต้องส่งออกมา เพื่อให้ <code class="code-voice">catch</code> ทำงานคืออะไร แล้วข้อผิดพลาดที่ทำให้ให้ส่วนที่สองและสามทำงานคืออะไร ?
    	</p>

  </aside>
</div><p class="para">อีกหนึ่งวิธีที่จะจัดการกับข้อผิดพลาดคือใช้ <code class="code-voice">try?</code> เพื่อที่จะเปลี่ยนผลลัพธ์ที่ได้ให้เป็นออปชันนัล ถ้าฟังก์ชันส่งข้อผิดพลาดกลับคืนมา ข้อผิดพลาดเกิดขึ้นจะถูกทิ้งไป และผลลัพธ์จะกลายเป็น <code class="code-voice">nil</code> แทน ในทางตรงกันข้ามผลลัพธ์จะเป็นออฟชันนอลซึ่งมีค่าที่ฟังก์ชันได้ส่งกลับมา</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">printerSuccess</code> = <code class="kt">try</code>? <code class="vc">sendToPrinter</code>(<code class="s">&quot;Mergenthaler&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">printerFailure</code> = <code class="kt">try</code>? <code class="vc">sendToPrinter</code>(<code class="s">&quot;Never Has Toner&quot;</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ใช้ <code class="code-voice">defer</code> เพื่อเขียนโค้ดในฟังก์ชันที่ต้องการให้ทำงานหลังจากโค้ดอื่นๆ โดยเขียนก่อนหน้าที่จะส่งค่ากลับ แม้ว่าฟังก์ชันจะส่งข้อผิดพลาดกลับมา โค้ดที่เขียนไว้ก็ยังจะทำงาน คุณสามารถใช้ <code class="code-voice">defer</code> เพื่อเขียนส่วน setup และ cleanup ติดกัน แม้ว่ามันจะทำงานคนละเวลากัน </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">fridgeIsOpen</code> = <code class="kt">false</code></code></li>
            <li><code class="code-voice"><code class="kt">let</code> <code class="vc">fridgeContent</code> = [<code class="s">&quot;milk&quot;</code>, <code class="s">&quot;eggs&quot;</code>, <code class="s">&quot;leftovers&quot;</code>]</code></li>
            <li><code class="code-voice"> </code></li>
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">fridgeContains</code>(<code class="vc">itemName</code>: <code class="n"><!-- a href="" logicalPath="" -->String<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="vc">fridgeIsOpen</code> = <code class="kt">true</code></code></li>
            <li><code class="code-voice">    <code class="kt">defer</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">fridgeIsOpen</code> = <code class="kt">false</code></code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    </code></li>
            <li><code class="code-voice">    <code class="kt">let</code> <code class="vc">result</code> = <code class="vc">fridgeContent</code>.<code class="vc">contains</code>(<code class="vc">itemName</code>)</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">result</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">fridgeContains</code>(<code class="s">&quot;banana&quot;</code>)</code></li>
            <li><code class="code-voice"><code class="vc">print</code>(<code class="vc">fridgeIsOpen</code>)</code></li>
        </ol>
      </div>
  </div>
</section>

</section>
<section class="section">
	<a id="TP40016643-CH2-NoLink_23">&#x200c;</a>
  <h3 class="section-name">Generics</h3>
  <p class="para">เขียนชื่อในเครื่องหมายมากกว่าน้อยกว่า เพื่อสร้างฟังก์ชันหรือประเภทข้อมูลแบบ generic</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">repeatItem</code>&lt;<code class="vc">Item</code>&gt;(<code class="vc">item</code>: <code class="n"><!-- a href="" logicalPath="" -->Item<!-- /a --></code>, <code class="vc">numberOfTimes</code>: <code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>) -&gt; [<code class="n"><!-- a href="" logicalPath="" -->Item<!-- /a --></code>] {</code></li>
            <li><code class="code-voice">    <code class="kt">var</code> <code class="vc">result</code> = [<code class="n"><!-- a href="" logicalPath="" -->Item<!-- /a --></code>]()</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="kt">_</code> <code class="kt">in</code> <code class="m">0</code>..&lt;<code class="vc">numberOfTimes</code> {</code></li>
            <li><code class="code-voice">        <code class="vc">result</code>.<code class="vc">append</code>(<code class="vc">item</code>)</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="vc">result</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">repeatItem</code>(<code class="s">&quot;knock&quot;</code>, <code class="vc">numberOfTimes</code>:<code class="m">4</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">คุณเขียนฟังชันก์และเมธอดแบบเจเนริก เหมือนกับที่เขียนคลาส อีนูเมเรชัน และสตรัคเจอร์</p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="c">// Reimplement the Swift standard library&#39;s optional type</code></code></li>
            <li><code class="code-voice"><code class="kt">enum</code> <code class="vc">OptionalValue</code>&lt;<code class="vc">Wrapped</code>&gt; {</code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">None</code></code></li>
            <li><code class="code-voice">    <code class="kt">case</code> <code class="vc">Some</code>(<code class="vc">Wrapped</code>)</code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="kt">var</code> <code class="vc">possibleInteger</code>: <code class="n"><!-- a href="" logicalPath="" -->OptionalValue<!-- /a --></code>&lt;<code class="n"><!-- a href="" logicalPath="" -->Int<!-- /a --></code>&gt; = .<code class="vc">None</code></code></li>
            <li><code class="code-voice"><code class="vc">possibleInteger</code> = .<code class="vc">Some</code>(<code class="m">100</code>)</code></li>
        </ol>
      </div>
  </div>
</section><p class="para">ใช้ <code class="code-voice">where</code> ต่อจากชื่อเพื่อกำหนดสิ่งที่ต้องการต่างๆ อย่างเช่น ต้องการข้อมูลที่รองรับโพรโทคอล หรือข้อมูลสองประเภทต้องเหมือนกัน หรือคลาสที่สืบทอดต้องมาจากซูเปอร์คลาสที่กำหนด </p><section class="code-listing">

  <div class="code-sample">
      <div class="Swift">
        <ol class="code-lines">
            <li><code class="code-voice"><code class="kt">func</code> <code class="vc">anyCommonElements</code> &lt;<code class="vc">T</code>: <code class="n"><!-- a href="" logicalPath="" -->SequenceType<!-- /a --></code>, <code class="vc">U</code>: <code class="n"><!-- a href="" logicalPath="" -->SequenceType<!-- /a --></code> <code class="kt">where</code> <code class="n"><!-- a href="" logicalPath="" -->T<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Generator<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Element<!-- /a --></code>: <code class="n"><!-- a href="" logicalPath="" -->Equatable<!-- /a --></code>, <code class="n"><!-- a href="" logicalPath="" -->T<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Generator<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Element<!-- /a --></code> == <code class="n"><!-- a href="" logicalPath="" -->U<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Generator<!-- /a --></code>.<code class="n"><!-- a href="" logicalPath="" -->Element<!-- /a --></code>&gt; (<code class="vc">lhs</code>: <code class="n"><!-- a href="" logicalPath="" -->T<!-- /a --></code>, <code class="kt">_</code> <code class="vc">rhs</code>: <code class="n"><!-- a href="" logicalPath="" -->U<!-- /a --></code>) -&gt; <code class="n"><!-- a href="" logicalPath="" -->Bool<!-- /a --></code> {</code></li>
            <li><code class="code-voice">    <code class="kt">for</code> <code class="vc">lhsItem</code> <code class="kt">in</code> <code class="vc">lhs</code> {</code></li>
            <li><code class="code-voice">        <code class="kt">for</code> <code class="vc">rhsItem</code> <code class="kt">in</code> <code class="vc">rhs</code> {</code></li>
            <li><code class="code-voice">            <code class="kt">if</code> <code class="vc">lhsItem</code> == <code class="vc">rhsItem</code> {</code></li>
            <li><code class="code-voice">                <code class="kt">return</code> <code class="kt">true</code></code></li>
            <li><code class="code-voice">            }</code></li>
            <li><code class="code-voice">        }</code></li>
            <li><code class="code-voice">    }</code></li>
            <li><code class="code-voice">    <code class="kt">return</code> <code class="kt">false</code></code></li>
            <li><code class="code-voice">}</code></li>
            <li><code class="code-voice"><code class="vc">anyCommonElements</code>([<code class="m">1</code>, <code class="m">2</code>, <code class="m">3</code>], [<code class="m">3</code>])</code></li>
        </ol>
      </div>
  </div>
</section><div class="note">
  <aside class="aside">
    	<p class="aside-title uppercase">แบบฝึกหัด</p>
    	<p class="para">แก้ไขฟังก์ชัน <code class="code-voice">anyCommonElements(_:_:)</code> เพื่อให้ฟังก์ชันส่งอาเรย์ที่มีสมาชิกสองลำดับเหมือนกัน
    	</p>

  </aside>
</div><p class="para">เขียน <code class="code-voice">&lt;T: Equatable&gt;</code> มีค่าเท่ากับการเขียน  <code class="code-voice">&lt;T where T: Equatable&gt;</code>.</p>

</section>

  </article>
</div>

    </div>
  </body>
</html>
